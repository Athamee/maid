// ticket.js
const { SlashCommandBuilder } = require('@discordjs/builders');
const { ActionRowBuilder, ButtonBuilder, ButtonStyle, AttachmentBuilder, PermissionFlagsBits, EmbedBuilder } = require('discord.js');
const path = require('path');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('ticket')
        .setDescription('Ouvrir un ticket en s√©lectionnant un type avec un bouton (r√©serv√© aux mod√©rateurs)'),

    async execute(interaction) {
        // V√©rification des permissions : admin ou r√¥le modo
        const modoRoleId = process.env.MODO;
        const isAdmin = interaction.member.permissions.has(PermissionFlagsBits.Administrator);
        const hasModoRole = modoRoleId && interaction.member.roles.cache.has(modoRoleId);

        if (!isAdmin && !hasModoRole) {
            console.warn(`[Permissions] Acc√®s refus√© pour ${interaction.member.user.tag} (pas admin ni modo)`);
            return interaction.reply({
                content: 'Vous n\'avez pas la permission d\'utiliser cette commande.',
                ephemeral: true
            });
        }

        console.log(`D√©but de /ticket par ${interaction.member.user.tag}`);

        try {
            // Diff√©rer la r√©ponse pour √©viter timeout
            await interaction.deferReply({ ephemeral: true });
            console.log('deferReply envoy√© dans execute');

            // Cr√©ation du bouton pour ouvrir un ticket
            const buttonNewTicket = new ButtonBuilder()
                .setCustomId('ticket_type_6')
                .setLabel('Nouveau Ticket')
                .setStyle(ButtonStyle.Secondary)
                .setEmoji('üé´');

            const row = new ActionRowBuilder().addComponents(buttonNewTicket);

            // Ajout de l‚Äôimage ticket.png
            const imagePath = path.join(__dirname, '..', 'img', 'ticket.png');
            const attachment = new AttachmentBuilder(imagePath, { name: 'ticket_image.png' });

            // Envoi du message avec bouton et image
            await interaction.channel.send({
                components: [row],
                files: [attachment],
            });

            // Confirmation √† l‚Äôutilisateur
            await interaction.editReply({
                content: 'Le message pour ouvrir un ticket a √©t√© envoy√©.',
                ephemeral: true
            });
            console.log(`Message de ticket envoy√© dans ${interaction.channel.id}`);
        } catch (error) {
            console.error('Erreur dans /ticket :', error.message, error.stack);
            try {
                await interaction.editReply({
                    content: `Une erreur est survenue lors de l‚Äôex√©cution de la commande : ${error.message}`,
                    ephemeral: true
                });
                console.log('editReply erreur envoy√© dans execute');
            } catch (replyError) {
                console.error('Erreur lors de editReply dans execute :', replyError.message, replyError.stack);
            }
        }
    },

    async handleButtonInteraction(interaction) {
        // Gestion du clic sur le bouton ticket_type_6
        if (interaction.customId === 'ticket_type_6') {
            console.log(`Bouton ticket_type_6 cliqu√© par ${interaction.member.user.tag}`);
            try {
                // Diff√©rer la r√©ponse
                await interaction.deferReply({ ephemeral: true });
                console.log('deferReply envoy√© dans handleButtonInteraction');

                // Charger ticketUtils
                const ticketUtils = require('../utils/ticketUtils');
                console.log('ticketUtils charg√© dans handleButtonInteraction :', Object.keys(ticketUtils));

                const member = interaction.member;
                const guild = interaction.guild;

                // Cr√©ation de l‚Äôembed avec le formulaire
                const embed = new EmbedBuilder()
                    .setDescription(`
                        ## Bienvenue sur le Donjon !
                        > Afin de d√©buter ton int√©gration, nous t'invitons √† remplir ce formulaire et √† r√©pondre √† **toutes** les questions.
                        > Cela nous aide √† voir que tu as lu le r√®glement.

                        **Si tu n'as r√©pondu √† ce formulaire dans les 24h, tu seras simplement kick du serveur.**

                        > - Pseudo :
                        ‚Ü≥
                        > - √Çge :
                        ‚Ü≥
                        > - Sexe/genre :
                        ‚Ü≥
                        > - Comment as-tu connu le Donjon ?
                        ‚Ü≥
                        > - Pourquoi nous rejoindre ?
                        ‚Ü≥
                        > - Sous quelles conditions peux-tu avoir acc√®s aux messages priv√©s ?
                        ‚Ü≥
                        > - As-tu lu et compris le r√®glement ?
                        ‚Ü≥
                        > - Acceptes-tu le r√®glement ?
                        ‚Ü≥
                        > - Comprends-tu les sanctions encourues en cas de manquement au r√®glement ?
                        ‚Ü≥`)
                    .setColor('#FFAA00');

                // D√©finir ticketType
                const ticketType = 'ticket_type_6';

                // Cr√©er le ticket avec ticketType et message s√©par√©s
                await ticketUtils.createTicketChannel(interaction.client, guild, member, ticketType, {
                    content: `<@${member.id}>, <@&1094318706487734483>`,
                    embeds: [embed],
                });

                // Confirmer √† l‚Äôutilisateur
                await interaction.editReply({
                    content: 'Votre ticket a √©t√© cr√©√© avec succ√®s.',
                    ephemeral: true
                });
                console.log(`Ticket cr√©√© pour ${member.user.tag}`);
            } catch (error) {
                console.error('Erreur lors de la cr√©ation du ticket :', error.message, error.stack);
                try {
                    await interaction.editReply({
                        content: `Erreur lors de la cr√©ation du ticket : ${error.message}`,
                        ephemeral: true
                    });
                    console.log('editReply erreur envoy√© dans handleButtonInteraction');
                } catch (replyError) {
                    console.error('Erreur lors de editReply dans handleButtonInteraction :', replyError.message, replyError.stack);
                }
            }
        }
    },

    async handleCloseTicket(interaction) {
        // Gestion du clic sur le bouton close_ticket
        if (interaction.customId === 'close_ticket') {
            console.log(`Bouton close_ticket cliqu√© par ${interaction.member.user.tag}`);
            try {
                // Diff√©rer la r√©ponse
                await interaction.deferReply({ ephemeral: true });
                console.log('deferReply envoy√© dans handleCloseTicket');

                // Charger ticketUtils
                const ticketUtils = require('../utils/ticketUtils');
                console.log('ticketUtils charg√© dans handleCloseTicket :', Object.keys(ticketUtils));

                // V√©rifier permissions utilisateur
                const member = interaction.member;
                const isAdmin = member.permissions.has(PermissionFlagsBits.Administrator);
                const modoRoleIds = process.env.MODO ? process.env.MODO.split(',').map(id => id.trim()) : [];
                const hasModoRole = modoRoleIds.some(roleId => member.roles.cache.has(roleId));

                if (!isAdmin && !hasModoRole) {
                    console.warn(`[Permissions] ${member.user.tag} a essay√© de fermer un ticket sans permission`);
                    await interaction.editReply({
                        content: 'Vous n\'avez pas la permission de fermer ce ticket.',
                        ephemeral: true
                    });
                    return;
                }

                // Fermer le ticket
                const channel = interaction.channel;
                console.log(`D√©but fermeture ticket ${channel.name}`);
                const result = await ticketUtils.closeTicketChannel(channel, `Ticket ferm√© par ${member.user.tag}`);
                console.log(`R√©sultat closeTicketChannel :`, result);

                // V√©rifier r√©sultat
                if (!result.success) {
                    throw new Error(result.error || '√âchec de la fermeture du ticket');
                }

                // Confirmer fermeture
                await interaction.editReply({
                    content: 'Ticket ferm√© avec succ√®s.',
                    ephemeral: true
                });
                console.log(`Ticket ${channel.name} ferm√© par ${member.user.tag}`);
            } catch (error) {
                console.error('Erreur dans handleCloseTicket :', error.message, error.stack);
                try {
                    await interaction.editReply({
                        content: `Erreur lors de la fermeture du ticket : ${error.message}`,
                        ephemeral: true
                    });
                    console.log('editReply erreur envoy√© dans handleCloseTicket');
                } catch (replyError) {
                    console.error('Erreur lors de editReply dans handleCloseTicket :', replyError.message, replyError.stack);
                }
            }
        }
    },
};