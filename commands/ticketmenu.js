// ticketmenu.js
const { 
    SlashCommandBuilder, 
    PermissionFlagsBits, 
    ActionRowBuilder, 
    StringSelectMenuBuilder, 
    AttachmentBuilder, 
    EmbedBuilder
} = require('discord.js');
const path = require('path');
const fs = require('fs').promises;
const { createTicketChannel } = require('../utils/ticketUtils');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('ticket-menu')
        .setDescription('Cr√©er un menu d√©roulant pour ouvrir un ticket (admins uniquement)')
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    async execute(interaction) {
        try {
            // Log d√©but commande
            console.log(`D√©but de /ticket-menu par ${interaction.member.user.tag}`);

            // V√©rifier si l‚Äôinteraction est valide avant defer
            if (!interaction.isRepliable()) {
                console.error('Interaction non r√©pliable dans execute');
                return;
            }

            // Diff√©rer la r√©ponse imm√©diatement
            await interaction.deferReply({ ephemeral: true });
            console.log('deferReply envoy√©');

            // V√©rifier l‚Äôexistence de l‚Äôimage
            const imagePath = path.join(__dirname, '../img/ticket_membre.png');
            try {
                await fs.access(imagePath);
                console.log(`Image trouv√©e : ${imagePath}`);
            } catch (err) {
                console.error(`Image manquante : ${imagePath}`, err.message);
                throw new Error(`Image ticket_membre.png introuvable`);
            }

            // Cr√©ation du menu d√©roulant
            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId('select_ticket')
                .setPlaceholder('S√©lectionne le type de ticket')
                .addOptions([
                    { label: 'üîûüîó Certification', description: ' ', value: 'Certification' },
                    { label: 'üìúüìùüîó Acc√®s MP', description: ' ', value: 'MP' },
                    { label: 'ü™ûüîó Acc√®s galerie des membres', description: ' ', value: 'galerie' },
                    { label: '‚õìüóùüîó Acc√®s salles de tortures', description: ' ', value: 'tortures' },
                    { label: '‚ÅâÔ∏èüîó Probl√®mes/questions', description: ' ', value: 'Probl√®mes' },
                    { label: 'ü´±üèΩ‚Äçü´≤üèºüîó Partenariat', description: ' ', value: 'Partenariat' },
                    { label: 'üìÆüîó Suggestions', description: ' ', value: 'Suggestions' },
                    { label: 'ü•∞üîó Recrutement', description: ' ', value: 'Recrutement' },
                ]);

            console.log('Menu d√©roulant cr√©√©');

            // Ajout de l‚Äôimage
            const attachment = new AttachmentBuilder(imagePath).setName('ticket_image.png');
            console.log('AttachmentBuilder cr√©√©');

            const row = new ActionRowBuilder().addComponents(selectMenu);

            // V√©rifier permissions bot
            const botPermissions = interaction.guild.members.me.permissionsIn(interaction.channel);
            if (!botPermissions.has([PermissionFlagsBits.SendMessages, PermissionFlagsBits.AttachFiles])) {
                console.error('Permissions manquantes pour le bot dans le canal', botPermissions.toArray());
                throw new Error('Le bot manque des permissions SendMessages ou AttachFiles');
            }
            console.log('Permissions v√©rifi√©es pour envoi menu');

            // Envoi du menu
            await interaction.channel.send({
                components: [row],
                files: [attachment],
            });
            console.log(`Menu envoy√© dans ${interaction.channel.id}`);

            // Confirmation
            await interaction.editReply({
                content: 'Le menu pour ouvrir un ticket a √©t√© envoy√© avec succ√®s.',
                ephemeral: true
            });
            console.log('editReply envoy√©');

        } catch (error) {
            console.error('Erreur dans execute de ticket-menu :', error.message, error.stack);
            try {
                // Tenter un reply si editReply √©choue
                await interaction.reply({
                    content: `Erreur lors de l‚Äôenvoi du menu : ${error.message}`,
                    ephemeral: true
                });
                console.log('reply erreur envoy√©');
            } catch (replyError) {
                console.error('Erreur lors de reply :', replyError.message, replyError.stack);
            }
        }
    },

    async handleMenuInteraction(interaction) {
        // Log toutes interactions re√ßues
        console.log(`Interaction menu re√ßue : customId=${interaction.customId}, user=${interaction.member.user.tag}`);
        
        // V√©rifier customId
        if (interaction.customId !== 'select_ticket') {
            console.log(`customId ${interaction.customId} ignor√©`);
            return;
        }

        // Ignorer si d√©j√† trait√©
        if (interaction.deferred || interaction.replied) {
            console.log(`Interaction select_ticket d√©j√† trait√©e pour ${interaction.member.user.tag}`);
            return;
        }

        const member = interaction.member;
        const guild = interaction.guild;

        // V√©rifier interaction.values
        console.log('Valeurs re√ßues :', interaction.values);
        if (!interaction.values || interaction.values.length === 0) {
            console.error('Aucune valeur s√©lectionn√©e dans le menu');
            return;
        }
        const selectedType = interaction.values[0];

        console.log(`Interaction select_ticket pour ${member.user.tag} avec type ${selectedType}`);

        try {
            // V√©rifier si l‚Äôinteraction est valide avant defer
            console.log('Avant deferReply dans handleMenuInteraction');
            if (!interaction.isRepliable()) {
                console.error(`Interaction non r√©pliable pour ${selectedType}`);
                return;
            }

            // Diff√©rer la r√©ponse
            await interaction.deferReply({ ephemeral: true });
            console.log('deferReply envoy√© dans handleMenuInteraction');

            // Valider selectedType
            const validTypes = ['Certification', 'MP', 'galerie', 'tortures', 'Probl√®mes', 'Partenariat', 'Suggestions', 'Recrutement'];
            if (!validTypes.includes(selectedType)) {
                throw new Error(`Type de ticket invalide : ${selectedType}`);
            }

            // Messages personnalis√©s pour chaque type de ticket
            const customMessages = {
                'Certification': `## Bienvenue pour ta certification.\nUn membre du Staff va venir d√®s que possible pour la r√©aliser.\n\n*La certification te permettra d'avoir un acc√®s plus large au serveur, mais aussi d'acc√©der aux contenus NSFW du serveur.*\n\n### Pour te faire certifier, tu as deux possibilit√©s :\n\n> * Nous avons besoin d'une photo d'un document sur lequel on peut voir ta photo et ta date de naissance, et un selfie. Cela nous permettra de faire la v√©rification.\n\n> * Tu peux aussi faire la v√©rification via un voc (avec cam).\n\n> *Aucune information ne sera conserv√©e.*`,
                'MP': `## Bienvenue pour ta demande d'acc√®s √† la correspondance priv√©e.\n\n> * **Nous te rappelons que toutes les demandes doivent passer par le canal Demande de correspondance**\n> *Tout MP sauvage entra√Ænera des sanctions.*\n\n### Nous comptons sur toi pour respecter le consentement des membres. :smiling_imp: `,
                'galerie': `## Bienvenue pour ta demande d'acc√®s √† la galerie des membres.\n\n> * **Tu pourras, avec cet acc√®s, d√©couvrir la t√™te de nos membres et nous montrer la tienne.**\n> *Aucune image NSFW ne sera tol√©r√©e dans ce canal !*\n\n> * **Par ailleurs tu auras aussi acc√®s au r√©pertoire des salles de tortures qui existent d√©j√†.**\n> *Tu pourras en demander l'acc√®s aux membres qui poss√®dent une salle priv√©e uniquement dans le post de leur salon qui se trouve dans ce r√©pertoire.*\n\n### Nous comptons sur toi pour respecter *tous* les membres. :smiling_imp: `,
                'tortures': `## Bienvenue pour ta demande d'acc√®s aux salles des tortures.\n\n> * **Tu vas pouvoir faire la demande d'une salle de torture privative.**\n> *Attention, tu pourras g√©rer qui aura acc√®s ou pas √† ta salle priv√©e. Cependant les membres non certifi√©s et ceux n'ayant pas l'acc√®s √† la galerie des membres n'ont pas de droits d'acc√®s √† ta salle personnelle. Si cela devait arriver, les sanctions seraient sans appel. √Ä toi de faire les choses dans les r√®gles pour jouir de ta salle personnelle.*\n> *Tout contenu ill√©gal, voir <#1337753374858416230>, est proscrit et sera passible d'un bannissement sans discussion. En cas de doute, posez-nous la question via <#1159895752076689492> (Probl√®mes/questions).*\n\n> * **Tu peux r√©clamer un r√¥le perso avec une couleur perso.**\n> *La couleur doit nous √™tre donn√©e au format #000000.*\n\n### Nous comptons sur toi pour respecter les membres tout en continuant √† partager sur ce sujet qui nous passionne. :smiling_imp: `,
                'Probl√®mes': `## Bienvenue √† toi !\n\n> * **Si tu as une question, nous ferons de notre mieux pour aider en cela.**\n> *N'oublie pas de rester courtois et respectueux. Le Staff fait de son mieux, et nous avons tous une vie en dehors de Discord. Nous tenterons toutefois de te r√©pondre aussi vite et clairement que possible.*\n\n> * **Si tu viens pour un probl√®me, nous √©tudierons le cas avec attention avant de statuer.**\n> *Nous t'invitons √† d√©crire ton probl√®me avec les informations n√©cessaires (screen si besoin). Nous serons peut-√™tre amen√©s √† te demander des pr√©cisions, si besoin.*\n> *Nous serons impartiaux et prendrons les mesures n√©cessaires le cas √©ch√©ant.*\n> *Dans tous les cas, on reste zen et on respire, avec la communication on peut r√©soudre beaucoup de probl√®mes.^^*`,
                'Partenariat': `## Bonjour √† toi membre estim√© d'un autre serveur !\n\n> * **Tu souhaites nous rejoindre dans le but de faire un partenariat ? Nous allons avoir besoin des informations suivantes :**\n> *Le nom du serveur partenaire pour lequel tu fais cette d√©marche*\n> *‚Ü≥*\n> *Ta place dans ledit serveur, afin que nous puissions comprendre ta latitude d'action.*\n> *‚Ü≥*\n> *Le lien d'invitation de ce serveur.*\n> *‚Ü≥*\n> *La raison pour laquelle tu souhaites ce partenariat avec nous.*\n> *‚Ü≥*`,
                'Suggestions': `## Quel plaisir de te voir ici !\n\n> * **Tu souhaites nous soumettre une id√©e ?**\n> *Nous t'invitons √† exposer ton id√©e de fa√ßon pr√©cise et claire afin que nous puissions l'√©tudier aussi concr√®tement que possible.*`,
                'Recrutement': `## Tu cherches √† rejoindre le Staff ?\n\n> * **Nous allons avoir besoin de quelques informations.**\n> *Est-ce que ta candidature fait suite √† une annonce du serveur (si c‚Äôest le cas, saute la question suivante et passe de suite √† la troisi√®me) ?*\n> *‚Ü≥*\n> *Pour quel poste candidates-tu ?*\n> *‚Ü≥*\n> *Quelles sont tes qualit√©s pour le poste en question ?*\n> *‚Ü≥*\n> *Pourquoi te choisir toi plut√¥t qu‚Äôune autre personne ?*\n> *‚Ü≥*`,
            };

            const customMessage = customMessages[selectedType] || 'Un message par d√©faut si le type n‚Äôexiste pas';

            // Cr√©ation de l‚Äôembed
            console.log('Cr√©ation embed pour ticket');
            const embed = new EmbedBuilder()
                .setTitle(`${selectedType.charAt(0).toUpperCase() + selectedType.slice(1)}`)
                .setDescription(customMessage)
                .setColor('#FFAA00');

            // Contenu avec ping
            let content = `<@${member.id}>`;
            if (selectedType === 'Partenariat') {
                content += ', <@&1340401306971672626>';
            } else {
                content += ', <@&1094318706487734483>';
            }

            // Cr√©ation du ticket
            console.log(`D√©but cr√©ation ticket pour ${selectedType}`);
            await createTicketChannel(interaction.client, guild, member, selectedType, { content, embeds: [embed] });
            console.log(`Ticket cr√©√© pour ${member.user.tag} (Type: ${selectedType})`);

            // Confirmation
            await interaction.editReply({
                content: 'Votre ticket a √©t√© cr√©√© avec succ√®s.',
                ephemeral: true
            });
            console.log('editReply envoy√© dans handleMenuInteraction');

        } catch (error) {
            console.error(`Erreur lors de la cr√©ation du ticket (${selectedType}) :`, error.message, error.stack);
            try {
                // Tenter un reply si editReply √©choue
                await interaction.reply({
                    content: `Erreur lors de la cr√©ation du ticket : ${error.message}`,
                    ephemeral: true
                });
                console.log('reply erreur envoy√© dans handleMenuInteraction');
            } catch (replyError) {
                console.error('Erreur lors de reply dans handleMenuInteraction :', replyError.message, replyError.stack);
            }
        }
    },

    async handleCloseTicket(interaction) {
        // Log toutes interactions re√ßues
        console.log(`Interaction close_ticket re√ßue : customId=${interaction.customId}, user=${interaction.member.user.tag}`);
        
        // V√©rifier customId
        if (interaction.customId !== 'close_ticket') {
            console.log(`customId ${interaction.customId} ignor√©`);
            return;
        }

        console.log(`Bouton close_ticket cliqu√© par ${interaction.member.user.tag}`);
        try {
            // Diff√©rer la r√©ponse
            await interaction.deferReply({ ephemeral: true });
            console.log('deferReply envoy√© dans handleCloseTicket');

            // V√©rifier permissions utilisateur
            const member = interaction.member;
            const isAdmin = member.permissions.has(PermissionFlagsBits.Administrator);
            const modoRoleIds = process.env.MODO ? process.env.MODO.split(',').map(id => id.trim()) : [];
            const hasModoRole = modoRoleIds.some(roleId => member.roles.cache.has(roleId));

            if (!isAdmin && !hasModoRole) {
                console.warn(`[Permissions] ${member.user.tag} a essay√© de fermer un ticket sans permission`);
                await interaction.editReply({
                    content: 'Vous n\'avez pas la permission de fermer ce ticket.',
                    ephemeral: true
                });
                return;
            }

            // Fermer le ticket
            const channel = interaction.channel;
            const { closeTicketChannel } = require('../utils/ticketUtils');
            console.log(`D√©but fermeture ticket ${channel.name}`);
            const result = await closeTicketChannel(channel, `Ticket ferm√© par ${member.user.tag}`);
            console.log(`R√©sultat closeTicketChannel :`, result);

            // V√©rifier r√©sultat
            if (!result.success) {
                throw new Error(result.error || '√âchec de la fermeture du ticket');
            }

            // Confirmer fermeture
            await interaction.editReply({
                content: 'Ticket ferm√© avec succ√®s.',
                ephemeral: true
            });
            console.log(`Ticket ${channel.name} ferm√© par ${member.user.tag}`);

        } catch (error) {
            console.error('Erreur dans handleCloseTicket :', error.message, error.stack);
            try {
                await interaction.editReply({
                    content: `Erreur lors de la fermeture du ticket : ${error.message}`,
                    ephemeral: true
                });
                console.log('editReply erreur envoy√© dans handleCloseTicket');
            } catch (replyError) {
                console.error('Erreur lors de editReply dans handleCloseTicket :', replyError.message, replyError.stack);
            }
        }
    }
};