const { SlashCommandBuilder, PermissionFlagsBits } = require('discord.js');
const pool = require('../db'); // Connexion √† ta base PostgreSQL

module.exports = {
    data: new SlashCommandBuilder()
        .setName('inactive-role')
        .setDescription('Ajoute ou enl√®ve un r√¥le selon la derni√®re prise d‚ÄôXP (admins uniquement)')
        .addIntegerOption(option =>
            option.setName('semaines')
                .setDescription('Nombre de semaines d‚Äôinactivit√© pour attribuer le r√¥le')
                .setRequired(true)
                .setMinValue(1))
        .addRoleOption(option =>
            option.setName('role')
                .setDescription('R√¥le √† attribuer aux membres inactifs ou √† enlever aux actifs')
                .setRequired(true))
        .addChannelOption(option =>
            option.setName('salon')
                .setDescription('Salon o√π envoyer le message pingant le r√¥le inactif')
                .setRequired(true))
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    async execute(interaction) {
        try {
            await interaction.deferReply({ ephemeral: true });

            const weeksInactive = interaction.options.getInteger('semaines');
            const inactiveRole = interaction.options.getRole('role');
            const targetChannel = interaction.options.getChannel('salon');
            const guild = interaction.guild;

            // V√©rification que le salon est un salon textuel
            if (targetChannel.type !== 0) { // 0 = GuildText
                throw new Error('Le salon sp√©cifi√© doit √™tre un salon textuel.');
            }

            // R√¥les des arrivants √† ignorer (deux variables distinctes)
            const arrivantRoleId1 = process.env.ARRIVANT_ROLE_ID_1 || 'ID_DU_ROLE_ARRIVANT_1'; // Fallback
            const partenaireRoleId = process.env.PARTENAIRE_ROLE_ID || 'ID_DU_ROLE_PARTENAIRE'; // Fallback
            const arrivantRoleIds = [arrivantRoleId1, partenaireRoleId];

            // Calcul de la date limite (ex. X semaines dans le pass√©)
            const cutoffDate = new Date(Date.now() - weeksInactive * 7 * 24 * 60 * 60 * 1000);

            console.log(`V√©rification des membres pour ${weeksInactive} semaines sans prise d‚ÄôXP avec le r√¥le ${inactiveRole.name}, ignorant les r√¥les ${arrivantRoleIds.map(id => `<@&${id}>`).join(', ')}`);

            // R√©cup√©ration des membres depuis la base de donn√©es avec leur derni√®re prise d‚ÄôXP
            const { rows: xpData } = await pool.query(
                'SELECT user_id, last_message FROM xp WHERE guild_id = $1',
                [guild.id]
            );

            // Conversion en Map pour acc√®s rapide
            const xpMap = new Map(xpData.map(row => [row.user_id, new Date(row.last_message)]));

            // R√©cup√©ration des membres du serveur (seulement ceux dans xp)
            const memberIds = [...xpMap.keys()];
            const members = await guild.members.fetch({ user: memberIds }).catch(err => {
                console.warn('Certains membres n‚Äôont pas pu √™tre r√©cup√©r√©s (peut-√™tre partis) :', err.message);
                return new Map();
            });

            let addedCount = 0;
            let removedCount = 0;

            // V√©rification des membres pr√©sents dans la base de donn√©es
            for (const [userId, lastXpGain] of xpMap) {
                const member = members.get(userId);
                if (!member || member.user.bot) continue; // Ignore si membre absent ou bot

                // Ignorer les membres avec l‚Äôun des r√¥les "Arrivant"
                if (arrivantRoleIds.some(roleId => member.roles.cache.has(roleId))) {
                    console.log(`Membre ${member.user.tag} ignor√© (poss√®de un r√¥le ignor√© : ${arrivantRoleIds.filter(id => member.roles.cache.has(id)).map(id => `<@&${id}>`).join(', ')})`);
                    continue;
                }

                const lastActivity = lastXpGain;
                const isInactive = lastActivity < cutoffDate;

                if (isInactive && !member.roles.cache.has(inactiveRole.id)) {
                    await member.roles.add(inactiveRole);
                    addedCount++;
                    console.log(`R√¥le ${inactiveRole.name} ajout√© √† ${member.user.tag} (sans XP depuis ${lastActivity.toISOString()})`);
                } else if (!isInactive && member.roles.cache.has(inactiveRole.id)) {
                    await member.roles.remove(inactiveRole);
                    removedCount++;
                    console.log(`R√¥le ${inactiveRole.name} enlev√© √† ${member.user.tag} (XP gagn√© depuis ${lastActivity.toISOString()})`);
                }
            }

            // V√©rification des membres sans entr√©e dans xp (jamais gagn√© d‚ÄôXP)
            const allMembers = await guild.members.fetch();
            for (const member of allMembers.values()) {
                if (member.user.bot) continue; // Ignore les bots
                if (xpMap.has(member.id)) continue; // D√©j√† trait√©

                // Ignorer les membres avec l‚Äôun des r√¥les "Arrivant"
                if (arrivantRoleIds.some(roleId => member.roles.cache.has(roleId))) {
                    console.log(`Membre ${member.user.tag} ignor√© (poss√®de un r√¥le ignor√© : ${arrivantRoleIds.filter(id => member.roles.cache.has(id)).map(id => `<@&${id}>`).join(', ')})`);
                    continue;
                }

                // Si pas d‚Äôentr√©e dans xp, on consid√®re qu‚Äôils n‚Äôont jamais gagn√© d‚ÄôXP
                const lastActivity = member.joinedAt; // Date d‚Äôarriv√©e comme fallback
                const isInactive = lastActivity < cutoffDate;

                if (isInactive && !member.roles.cache.has(inactiveRole.id)) {
                    await member.roles.add(inactiveRole);
                    addedCount++;
                    console.log(`R√¥le ${inactiveRole.name} ajout√© √† ${member.user.tag} (jamais gagn√© d‚ÄôXP, arriv√©e ${lastActivity.toISOString()})`);
                }
            }

            // Envoi du message personnalis√© dans le salon sp√©cifi√©
            if (addedCount > 0 || removedCount > 0) {
                const messageContent = `
    **Mise √† jour de l‚Äôinactivit√© :**
    - ${addedCount} membres n‚Äôont pas gagn√© d‚ÄôXP et ont re√ßu le r√¥le <@&${inactiveRole.id}>.
    - ${removedCount} membres ont repris de l‚ÄôXP et ont perdu le r√¥le.
    *P√©riode d‚Äôinactivit√© : ${weeksInactive} semaines.*

    
    * **Si vous √™tes dans ce salon c'est que vous √™tes inactifs !**
    > *Vous devriez revenir pour participer, sinon la voiture-balai du Donjon vous emm√®nera prochainement vers la porte.*

    
    ***On vous attends, bandes de tortur√©es & tortur√©s du bocal !***
    üòà
`.trim();
                await targetChannel.send(messageContent);
                console.log(`Message envoy√© dans ${targetChannel.name} (ID: ${targetChannel.id})`);
            } else {
                console.log('Aucun changement d√©tect√©, pas de message envoy√©.');
            }

            await interaction.editReply({
                content: `${addedCount} membres inactifs ont re√ßu le r√¥le ${inactiveRole.name}, ${removedCount} membres actifs l‚Äôont perdu.`,
                ephemeral: true
            });
            console.log(`Commande /inactive-role termin√©e : ${addedCount} ajout√©s, ${removedCount} enlev√©s`);
        } catch (error) {
            console.error('Erreur dans /inactive-role :', error.stack);
            await interaction.editReply({
                content: 'Une erreur est survenue lors de l‚Äôex√©cution de la commande.',
                ephemeral: true
            });
        }
    }
};