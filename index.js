// Importer les modules nÃ©cessaires
const { Client, GatewayIntentBits, Collection } = require('discord.js');
const { REST } = require('@discordjs/rest');
const { Routes } = require('discord.js');
const fs = require('fs').promises;
const path = require('path');
require('dotenv').config();
const pool = require('./db');
const express = require('express');

// Initialiser le client Discord avec les intents nÃ©cessaires
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.GuildMessageReactions // AjoutÃ© pour messageReactionAdd
    ]
});

// Initialiser client.commands comme une Collection
client.commands = new Collection();

// Initialise le serveur Express pour le monitoring et health checks
const app = express();

// Endpoint Health Check pour Render
app.get('/health', (req, res) => {
    res.status(200).send('Maid babe est en bonne santÃ© !');
});

// Endpoint racine pour vÃ©rifier manuellement que le bot est en vie
app.get('/', (req, res) => res.send('Ta servante dÃ©vouÃ©e, Maid babe, est vivante !'));

// DÃ©finit le port (fourni par Render ou 8000 par dÃ©faut)
const port = process.env.PORT || 8000;
app.listen(port, () => console.log(`Serveur Express dÃ©marrÃ© sur le port ${port}`));

// Fonction pour initialiser les tables de la base de donnÃ©es
async function initDatabase() {
    try {
        // CrÃ©er la table des avertissements
        await pool.query(`
            CREATE TABLE IF NOT EXISTS warns (
                id SERIAL PRIMARY KEY,
                user_id TEXT NOT NULL,
                guild_id TEXT NOT NULL,
                reason TEXT,
                moderator_id TEXT NOT NULL,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);

        // CrÃ©er la table pour le systÃ¨me dâ€™XP
        await pool.query(`
            CREATE TABLE IF NOT EXISTS xp (
                user_id TEXT NOT NULL,
                guild_id TEXT NOT NULL,
                xp INTEGER DEFAULT 0,
                level INTEGER DEFAULT 1,
                last_message TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (user_id, guild_id)
            )
        `);

        // CrÃ©er la table pour les paramÃ¨tres dâ€™XP
        await pool.query(`
            CREATE TABLE IF NOT EXISTS xp_settings (
                guild_id TEXT PRIMARY KEY,
                message_xp INTEGER DEFAULT 10,
                voice_xp_per_min INTEGER DEFAULT 5,
                reaction_xp INTEGER DEFAULT 2,
                image_xp INTEGER DEFAULT 15,
                level_up_channel TEXT DEFAULT NULL,
                excluded_roles TEXT DEFAULT '[]',
                no_camera_channels TEXT DEFAULT '[]',
                spam_settings TEXT DEFAULT '{}',
                default_level_message TEXT DEFAULT 'FÃ©licitations {user}, tu es dÃ©sormais niveau {level} ! Continue d''explorer tes dÃ©sirs intimes sur le Donjon. ðŸ˜ˆ'
            )
        `);

        // CrÃ©er la table pour les messages personnalisÃ©s de montÃ©e de niveau
        await pool.query(`
            CREATE TABLE IF NOT EXISTS level_up_messages (
                guild_id TEXT NOT NULL,
                level INTEGER NOT NULL,
                message TEXT NOT NULL,
                PRIMARY KEY (guild_id, level)
            )
        `);

        // CrÃ©er la table pour les paramÃ¨tres des rÃ´les vocaux
        await pool.query(`
            CREATE TABLE IF NOT EXISTS voice_role_settings (
                guild_id TEXT NOT NULL,
                voice_channel_id TEXT NOT NULL,
                role_id TEXT NOT NULL,
                text_channel_id TEXT NOT NULL,
                PRIMARY KEY (guild_id, voice_channel_id)
            )
        `);

        // CrÃ©er la table pour stocker les rÃ´les retirÃ©s aprÃ¨s warns
        await pool.query(`
            CREATE TABLE IF NOT EXISTS warn_removed_roles (
                guild_id TEXT NOT NULL,
                user_id TEXT NOT NULL,
                removed_roles TEXT DEFAULT '[]',
                PRIMARY KEY (guild_id, user_id)
            )
        `);

        // CrÃ©er la table pour le suivi du spam
        await pool.query(`
            CREATE TABLE IF NOT EXISTS spam_tracker (
                id SERIAL PRIMARY KEY,
                guild_id TEXT NOT NULL,
                user_id TEXT NOT NULL,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);

        // Migration pour ajouter les colonnes manquantes Ã  xp_settings
        await pool.query(`
            ALTER TABLE xp_settings
            ADD COLUMN IF NOT EXISTS spam_settings TEXT DEFAULT '{}',
            ADD COLUMN IF NOT EXISTS excluded_roles TEXT DEFAULT '[]',
            ADD COLUMN IF NOT EXISTS no_camera_channels TEXT DEFAULT '[]',
            ADD COLUMN IF NOT EXISTS default_level_message TEXT DEFAULT 'FÃ©licitations {user}, tu es dÃ©sormais niveau {level} ! Continue dâ€™explorer tes dÃ©sirs intimes sur le Donjon. ðŸ˜ˆ';
        `);

        // S'assurer que spam_settings n'est pas NULL
        await pool.query(`
            UPDATE xp_settings 
            SET spam_settings = '{}'
            WHERE spam_settings IS NULL;
        `);

        console.log('Tables warns, xp, xp_settings, level_up_messages, voice_role_settings, warn_removed_roles, spam_tracker prÃªtes avec toutes les migrations.');
    } catch (error) {
        console.error('Erreur lors de lâ€™initialisation de la base de donnÃ©es :', error.stack);
        throw error;
    }
}

// Charger les commandes
const commands = [];
const commandsPath = path.join(__dirname, 'commands');

async function loadCommands() {
    try {
        console.log('DÃ©but chargement des commandes...');
        const commandFiles = await fs.readdir(commandsPath);
        if (commandFiles.length === 0) {
            console.warn('Aucun fichier trouvÃ© dans commands/');
        }
        for (const file of commandFiles) {
            if (file.endsWith('.js')) {
                const filePath = path.join(commandsPath, file);
                console.log(`Tentative chargement : ${file}`);
                try {
                    const command = require(filePath);
                    if ('data' in command && 'execute' in command) {
                        commands.push(command.data.toJSON());
                        client.commands.set(command.data.name, command);
                        console.log(`Commande chargÃ©e : ${file} (nom: ${command.data.name})`);
                    } else {
                        console.warn(`[WARNING] La commande Ã  ${filePath} manque une propriÃ©tÃ© 'data' ou 'execute'.`);
                    }
                } catch (error) {
                    console.error(`Erreur chargement ${file} :`, error.message);
                }
            }
        }
        console.log(`Total commandes chargÃ©es : ${client.commands.size}`);
        console.log('Commandes enregistrÃ©es :', Array.from(client.commands.keys()));
    } catch (error) {
        console.error('Erreur lors du chargement des commandes :', error.stack);
    }
}

// DÃ©ployer les commandes
async function deployCommands() {
    const rest = new REST({ version: '10' }).setToken(process.env.TOKEN);
    try {
        console.log('DÃ©ploiement des commandes...');
        await rest.put(
            Routes.applicationGuildCommands(process.env.ID_APP, process.env.GUILD_ID),
            { body: commands }
        );
        console.log('Commandes dÃ©ployÃ©es avec succÃ¨s !');
    } catch (error) {
        console.error('Erreur lors du dÃ©ploiement des commandes :', error.stack);
    }
}

// Charger les Ã©vÃ©nements
const eventsPath = path.join(__dirname, 'events');

async function loadEvents() {
    try {
        console.log('DÃ©but chargement des Ã©vÃ©nements...');
        // VÃ©rifier si le dossier events existe
        try {
            await fs.access(eventsPath);
        } catch (error) {
            console.error(`Erreur : Le dossier ${eventsPath} nâ€™existe pas ou est inaccessible :`, error.message);
            return;
        }
        const eventFiles = await fs.readdir(eventsPath);
        if (eventFiles.length === 0) {
            console.error('Erreur : Aucun fichier trouvÃ© dans events/');
            return;
        }
        for (const file of eventFiles) {
            if (file.endsWith('.js')) {
                const filePath = path.join(eventsPath, file);
                console.log(`Tentative chargement : ${file}`);
                try {
                    const event = require(filePath);
                    if (event.name && event.execute) {
                        if (event.once) {
                            client.once(event.name, (...args) => event.execute(...args));
                        } else {
                            client.on(event.name, (...args) => event.execute(...args));
                        }
                        console.log(`Ã‰vÃ©nement chargÃ© : ${file} (nom: ${event.name})`);
                    } else {
                        console.warn(`[WARNING] Lâ€™Ã©vÃ©nement Ã  ${filePath} manque une propriÃ©tÃ© 'name' ou 'execute'.`);
                    }
                } catch (error) {
                    console.error(`Erreur chargement ${file} :`, error.message);
                }
            }
        }
        console.log('Ã‰vÃ©nements enregistrÃ©s :', client.eventNames());
    } catch (error) {
        console.error('Erreur lors du chargement des Ã©vÃ©nements :', error.stack);
    }
}

// Initialisation
(async () => {
    try {
        await initDatabase();
        await loadCommands();
        console.log('client.commands prÃªt pour les interactions');
        await deployCommands();
        await loadEvents();
        await client.login(process.env.TOKEN);
    } catch (error) {
        console.error('Erreur lors de lâ€™initialisation :', error.stack);
        process.exit(1);
    }
})();

// Confirmer que le bot est en ligne
client.on('ready', () => {
    console.log('Maid babe est en ligne !');
});